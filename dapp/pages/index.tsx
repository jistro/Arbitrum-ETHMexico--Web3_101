'use client';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { readContract } from '@wagmi/core'
import { useAccount } from 'wagmi';
import { useEffect, useState } from 'react';
import { format } from 'date-fns';
import Data from '../abi/Data.json';
import Service from '../abi/Service.json';

const addressData = process.env.NEXT_PUBLIC_DATA_SC;
const addressService = process.env.NEXT_PUBLIC_SERVICE_SC;


function formatUnixEpochTime(unixEpochTime: number | bigint): string {
  const unixEpochTimeAsNumber = typeof unixEpochTime === 'bigint' ? Number(unixEpochTime) : unixEpochTime;
  const formattedDate = format(new Date(unixEpochTimeAsNumber * 1000), 'dd/MM/yyyy HH:mm:ss');
  return formattedDate;
}


const Home: NextPage = () => {
  const { address, isConnected } = useAccount();
  const [isClient, setIsClient] = useState(false);
  const [employee, setEmployee] = useState<any>(null);

  useEffect(() => {
    setIsClient(true);
  }, []);

  const getDataEmployee = () => {
    readContract({
      address: addressService as '0x${string}',
      abi: Service.abi,
      functionName: 'getMyInfo',
      account: address,
    }).then((data) => {
      setEmployee(data);
      console.log(data);
    });
  }

  useEffect(() => {
    if (isConnected) {
      getDataEmployee();
    }
  }, [isConnected, address]);

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        {isClient && (
          <>
            {isConnected ? (
              <>
                <div>
                  {employee && (
                    <>
                      <p>
                        <strong>Name:</strong> {employee.firstName} {employee.lastName}
                      </p>
                      <p>
                        <strong>Role:</strong> {
                          employee.role === 1 ? 'Admin' : employee.role === 2 ? 'Manager' : 'Employee'
                        }
                        <p>
                          {employee.egressDate != 0 ?
                            `Egress Date:${formatUnixEpochTime(employee.egressDate)}`
                            :
                            `Ingress Date:${formatUnixEpochTime(employee.ingressDate)}`
                          }
                        </p>
                      </p>
                    </>
                  )}
                </div>
              </>
            ) : (
              <div>
                <p>
                  To get started, connect your wallet using the button above.
                </p>
              </div>
            )}
          </>
        )}



      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div >
  );
};

export default Home;
